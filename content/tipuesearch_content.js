var tipuesearch = {"pages": [{'title': 'About', 'text': '網頁:\xa0 https://mdecd2024.github.io/test-ag1 \xa0 \n 網誌:\xa0 https://mdecd2024.github.io/test-ag1/blog \xa0 \n 簡報:  https://mdecd2024.github.io/test-ag1/reveal \xa0 \n 倉儲:\xa0 https://github.com/mdecd2024/test-ag1 \xa0 \n', 'tags': '', 'url': 'About.html'}, {'title': 'Edit_on_Replit', 'text': '針對擁有管理授權的 Github Classroom 倉儲, 如何利用 Replit 進行維護. \n 設法在 Replit 帳號下, 利用 ssh-keygen 指令建立 .ssh 目錄下的 id_rsa 與 id_rsa.pub, 將 id_rsa.pub 送到 Github 帳號後, 此 id_rsa 私鑰即具有將此 Replit 帳號推向 Github 的權限. \n 只是使用者必須設法利用 vi 自行建立 .ssh/config, 並且將 config 中所宣告的 Host 名稱, 以 SSH 協定格式, 修改倉儲 .git 目錄中的 config 連線設定. \n cd .. \n ssh-keygen \n cp id_rsa.pub ./../test-ag1 \n cp id_rsa.pub to Github \n vi config \n \n Host github.com\n\nUser git\n\nHostname github.com \n 修改倉儲 .git 目錄中的 config, 以 SSH 對 Github 連線 \n \n 至於各協同設計學員從 Github Classsroom 所取得的分組倉儲, 由於在設定時已經賦予各組員管理權限, 因此在 localhost, 只要透過 puttygen 建立公私鑰, 並設定連線 session, 並且將此 session, 放入分組倉儲的 .git/config 設定檔案中, 以 SSH 協定將改版資料送到 Github 即可. \n 只不過 putty 中所設定的 session 資料會綁定到電腦的 registry, 使用者更換電腦的過程, 必須自行以 USB 儲存設定, 並在啟動可攜環境時, 將先前的 putty 設定導入, 否則每次使用不同的電腦, 都必須重新設定 SSH 所需的 session. \n', 'tags': '', 'url': 'Edit_on_Replit.html'}, {'title': '41123199', 'text': '真實的 Github 帳號為 scrum-2 因為要將  https://github.com/scrum-2/cd2024 \xa0倉儲設為 test-ag1 分組倉儲的子模組, 因此使用虛擬的學號 41123199, 當完成設定之後, 41123199 學員的個人課程倉儲將可由 \n https://mdecd2024.github.io/test-ag1/41123199 \xa0連結中擷取 \n 各倉儲的 .ssh 屬性各自獨立, 因為每一個 Replit 中的 Repl 專案都是獨立個體. \n 設定以 SSH 協定將改版資料推向 Github 後, 必須先從 Shell 執行 git push, 確定要使用 id_rsa 取得授權之後, 才能再透過 git 執行隨後的 push.', 'tags': '', 'url': '41123199.html'}, {'title': 'platform', 'text': '鋼球平衡台的零組件繪圖分別由: \n 41123199 學員繪製 parts:\xa0 https://mdecd2024.github.io/test-ag1/41123199/parts \xa0 \n 這裡也可以直接引用 41123199 學員 cd2024 倉儲中的圖片或其他檔案資料 \n https://mdecd2024.github.io/test-ag1/41123199/images/cad2023_2d_ball_platform_balance_0.9_0.3m_PID_control.gif \xa0 \n \n 上圖的 html 為: \n <p><img src="https://mdecd2024.github.io/test-ag1/41123199/images/cad2023_2d_ball_platform_balance_0.9_0.3m_PID_control.gif" alt="" width="400"></p> \n 也就是檔案放在組員的個人課程倉儲中, 但導入作為子模組之後, 將圖片的網址放到分組網站中使用.', 'tags': '', 'url': 'platform.html'}, {'title': 'cmsimde', 'text': "SMap  - SiteMap - 依照階次列出網站的所有頁面. \n EditA  - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本. \n Edit  - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式. \n Config  - Configure Site - 編輯頁面標題與管理者密碼. \n Search  - 動態頁面內容的關鍵字搜尋. \n IUpload  - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小. \n IList  - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案. \n FUpload  - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改. \n FList  - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案. \n Logout  - 登出頁面編輯模式. \n Convert  - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁. \n acp  - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲. \n SStatic  - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容. \n RStatic  - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站. \n 80  - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80. \n", 'tags': '', 'url': 'cmsimde.html'}, {'title': 'Replit', 'text': 'https://replit.com \n 利用 init_replit 指令安裝所需 Python 模組 chmod u+x init_replit ./init_replit \n On Replit: \n .replit: python3 main.py \n chmod u+x cms init_replit \n ./init_replit \n for cmsimde_site (not needed): git submodule update --init --recursive \n for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent \n password generator:\xa0 https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py \xa0 \n \n for IPv6 only Ubuntu: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.com ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p for Replit: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.co #since Replit works for IPv4, therefore no ProxyCommand setting needed #ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n \n', 'tags': '', 'url': 'Replit.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};