<h1>About</h1>
<p>網頁: <a href="https://mdecd2024.github.io/test-ag1">https://mdecd2024.github.io/test-ag1</a> </p>
<p>網誌: <a href="https://mdecd2024.github.io/test-ag1/blog">https://mdecd2024.github.io/test-ag1/blog</a> </p>
<p>簡報: <a href="https://mdecd2024.github.io/test-ag1/reveal">https://mdecd2024.github.io/test-ag1/reveal</a> </p>
<p>倉儲: <a href="https://github.com/mdecd2024/test-ag1">https://github.com/mdecd2024/test-ag1</a> </p>
<h2>AI</h2>
<p>ChatGPT 問答:</p>
<p>Replit 歷史為何?</p>
<p>ChatGPT 回答:</p>
<p style="padding-left: 30px;">Replit 是一個線上程式碼編輯器和開發環境，旨在讓開發者可以在瀏覽器中輕鬆地編寫、執行和分享程式碼。它的歷史可以追溯到 <span style="background-color: #ffff00;">2011 年</span>，當時它是一個名為 "Repl.it" 的網站，提供了一個簡單的線上 Python 編輯器。該平台的目標是讓使用者無需安裝任何軟體即可開始編寫和執行程式碼。</p>
<p style="padding-left: 30px;">隨著時間的推移，Replit 不斷擴展其功能，使其支援了更多的程式語言，包括但不限於 JavaScript、Ruby、Java、C、C++、C# 等等。它也提供了與其他開發者協作的功能，使得使用者可以在線上進行實時的程式碼編輯與分享。</p>
<p style="padding-left: 30px;">在經歷了多次更新和改進後，Replit 在開發者社區中逐漸備受歡迎。它的用戶群涵蓋了從初學者到專業開發者的廣泛範圍，並且被廣泛應用於教育、學術研究以及軟體開發等領域。</p>
<p style="padding-left: 30px;">除了提供線上程式碼編輯器外，Replit 還提供了一系列工具和服務，包括實時聊天、課程製作工具、部署應用程式的功能等，這些功能進一步擴展了其應用範圍和使用者群。</p>
<p>Github 的歷史為何?</p>
<p>ChatGPT 回答:</p>
<p style="padding-left: 30px;">GitHub 是一個基於 Git 版本控制系統的程式碼託管平台，旨在為開發者提供一個共享程式碼、協作開發和管理專案的平台。以下是 GitHub 的歷史概述：</p>
<p style="padding-left: 30px;">1. **成立與發展：**GitHub 於 <span style="background-color: #ffff00;">2008 年</span>由 Tom Preston-Werner、Chris Wanstrath 和 PJ Hyett 成立。當時，他們希望建立一個易於使用、支援社群參與並促進開源開發的平台。他們的目標是為全球開發者提供一個集中式的地方來存儲、分享和協作開發程式碼。</p>
<p style="padding-left: 30px;">2. **開源貢獻：**GitHub 提供了一個方便的方式來將程式碼存儲在遠端儲存庫中，並通過 Git 版本控制系統來追蹤變更。開發者可以複製（fork）其他專案、提交（commit）變更、發起（pull request）合併請求等，這使得開源協作變得更加容易和透明。</p>
<p style="padding-left: 30px;">3. **爆發性增長：**GitHub 很快成為了開發者社群中最受歡迎的程式碼託管平台之一。其易於使用的介面、豐富的功能集以及廣泛的社群參與使其在短時間內取得了爆發性增長。</p>
<p style="padding-left: 30px;">4. **被微軟收購：**2018 年，微軟宣布以 75 億美元的價格收購 GitHub。這一舉動引起了廣泛關注和討論，並引發了開發者社群對於未來發展的疑慮和討論。</p>
<p style="padding-left: 30px;">5. **持續發展：**自收購以來，GitHub 一直在持續發展和改進其平台。它不斷推出新功能、改進用戶體驗，並積極參與開源社群和項目。</p>
<p style="padding-left: 30px;">總的來說，GitHub 在開發者社群中佔有重要地位，成為了許多開源和私有專案的首選託管平台之一，並持續影響著軟體開發和協作的方式。</p>
<p>Github Codespaces 歷史為何?</p>
<p>ChatGPT 回答:</p>
<p style="padding-left: 30px;">GitHub Codespaces 是 GitHub 提供的一項服務，它使開發者可以在雲端中設置和使用開發環境。以下是 GitHub Codespaces 的歷史概述：</p>
<p style="padding-left: 30px;">1. **CodeSpaces 開始：**GitHub Codespaces 最早可以追溯到 <span style="background-color: #ffff00;">2011 年</span>，當時它被稱為 "CodeSpaces"。CodeSpaces 是一個獨立的項目，提供了基於雲端的開發環境，使開發者可以使用瀏覽器中的編輯器進行開發工作。</p>
<p style="padding-left: 30px;">2. **Microsoft 收購 GitHub：**2018 年，Microsoft 收購了 GitHub。這一收購後，GitHub 開始積極擴展其服務和功能，以提供更多價值給開發者社群。</p>
<p style="padding-left: 30px;">3. **整合成 GitHub Codespaces：**隨著 Microsoft 收購 GitHub，CodeSpaces 的技術和概念被整合到 GitHub 平台中，並於 <span style="background-color: #ffff00;">2020 年</span>正式推出 GitHub Codespaces。GitHub Codespaces 為開發者提供了一個完全托管的開發環境，無需設置本地開發環境即可進行程式碼編寫和測試。</p>
<p style="padding-left: 30px;">4. **主要功能：**GitHub Codespaces 允許開發者在瀏覽器中訪問預配置的開發環境，其中包括所需的程式語言、工具和依賴項。開發者可以根據自己的需求自定義這些環境，並與團隊成員共享這些環境。</p>
<p style="padding-left: 30px;">5. **提供彈性：**GitHub Codespaces 提供了彈性的價格計劃，從個人開發者到企業用戶都可以找到適合自己需求的方案。它也與 GitHub Repositories 無縫集成，開發者可以在 GitHub 上直接創建 Codespaces 並與其它功能（如 Issues、Pull Requests 等）進行互動。</p>
<p style="padding-left: 30px;">總的來說，GitHub Codespaces 作為 GitHub 提供的一項服務，為開發者提供了一個方便、彈性和完全托管的開發環境，使他們可以更加輕鬆地進行程式碼編寫和協作開發。</p>
<p>Gitpod 歷史為何?</p>
<p style="padding-left: 30px;">Gitpod 是一個線上的開發環境平台，它提供了一個基於雲端的開發環境，讓開發者可以在瀏覽器中快速啟動、編寫和測試他們的程式碼。以下是 Gitpod 的歷史概述：</p>
<p style="padding-left: 30px;">1. **成立：**Gitpod 成立於 <span style="background-color: #ffff00;">2018 年</span>，由 Sven Efftinge、Simon Kaegi 和 Moritz Eysholdt 共同創立。他們在創立 Gitpod 前，曾經參與過 Eclipse Theia 開源項目的開發，並在此基礎上啟動了 Gitpod 的發展。</p>
<p style="padding-left: 30px;">2. **開源項目：**Gitpod 的核心技術是基於 Eclipse Theia 和 Docker 的開源項目。Eclipse Theia 是一個開源的線上IDE框架，而 Docker 則是一個開源的容器化平台。Gitpod 將這兩個技術結合起來，提供了一個強大的線上開發環境。</p>
<p style="padding-left: 30px;">3. **功能擴展：**隨著時間的推移，Gitpod 不斷擴展其功能和特點。它提供了預配置的開發環境、完整的 Git 版本控制功能、與 GitLab、GitHub、Bitbucket 等程式碼託管平台的集成，以及用戶自定義的工作空間配置等功能。</p>
<p style="padding-left: 30px;">4. **使用者增長：**Gitpod 的使用者群體在成立後逐漸增長。它受到開發者社群的歡迎，特別是對於那些需要快速啟動開發環境並進行協作開發的開發團隊。</p>
<p style="padding-left: 30px;">5. **商業化發展：**除了開源項目外，Gitpod 還開始推出商業版服務，包括付費訂閱計劃、企業合同和其他付費服務。這些商業化發展使得 Gitpod 能夠獲取收入並持續發展。</p>
<p style="padding-left: 30px;">總的來說，Gitpod 是一個由 Eclipse Theia 和 Docker 技術基礎上建立的線上開發環境平台，它受到開發者社群的歡迎，並逐漸擴展其功能和商業化發展。</p>
<p style="padding-left: 30px;"></p>
<p></p><h1>Video</h1>
<p>OBS, Handbrake and auto-subtitle</p>
<p><a href="https://obsproject.com/download">https://obsproject.com/download</a> </p>
<p><a href="https://handbrake.fr/downloads.php">https://handbrake.fr/downloads.php</a> </p>
<p><a href="https://github.com/m1guelpf/auto-subtitle">https://github.com/m1guelpf/auto-subtitle</a> </p>
<p>每一個學員都要學會如何利用 OBS 錄製電腦操作影片以及即時線上串流</p>
<p>利用 Handbrake 轉換影片檔案格式</p>
<p>並且利用 auto-subtitle 在影片中配上字幕</p><h1>Edit_on_Replit</h1>
<p>針對擁有管理授權的 Github Classroom 倉儲, 如何利用 Replit 進行維護.</p>
<p>設法在 Replit 帳號下, 利用 ssh-keygen 指令建立 .ssh 目錄下的 id_rsa 與 id_rsa.pub, 將 id_rsa.pub 送到 Github 帳號後, 此 id_rsa 私鑰即具有將此 Replit 帳號推向 Github 的權限.</p>
<p>只是使用者必須設法利用 vi 自行建立 .ssh/config, 並且將 config 中所宣告的 Host 名稱, 以 SSH 協定格式, 修改倉儲 .git 目錄中的 config 連線設定.</p>
<p>cd ..</p>
<p>ssh-keygen</p>
<p>cp id_rsa.pub ./../test-ag1</p>
<p>cp id_rsa.pub to Github</p>
<p>vi config</p>
<p></p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">Host github.com

User git

Hostname github.com</pre>
<p><br/>修改倉儲 .git 目錄中的 config, 以 SSH 對 Github 連線</p>
<hr/>
<p>至於各協同設計學員從 Github Classsroom 所取得的分組倉儲, 由於在設定時已經賦予各組員管理權限, 因此在 localhost, 只要透過 puttygen 建立公私鑰, 並設定連線 session, 並且將此 session, 放入分組倉儲的 .git/config 設定檔案中, 以 SSH 協定將改版資料送到 Github 即可.</p>
<p>只不過 putty 中所設定的 session 資料會綁定到電腦的 registry, 使用者更換電腦的過程, 必須自行以 USB 儲存設定, 並在啟動可攜環境時, 將先前的 putty 設定導入, 否則每次使用不同的電腦, 都必須重新設定 SSH 所需的 session.</p>
<hr/>
<p>另外, Replit 提供給<a href="https://replit.com/pricing">免費帳號的運算資源</a>較 Codespaces 少. 但僅限制單一帳號總容量 10GB, 似乎沒有總使用運算容量的限制(?)</p>
<p>若要在 Replit 中使用從 Github Classroom 取下的倉儲, 則必須以程式方法在每次不同電腦開啟 Repl 的時候, 自行配置 /home/runner/.ssh 中的 id_rsa 與 config 設定檔案.</p>
<p>此過程可以透過可攜環境中的 Puttygen 與動態網站資料上傳 id_rsa.txt 與 config.txt, 並在 Replit shell 中執行 python3 ssh.py 完成設定.</p>
<p>ssh.py</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import os
if not os.path.exists("/home/runner/.ssh"): 
    os.makedirs("/home/runner/.ssh") 
os.system("mv ./downloads/id_rsa.txt /home/runner/.ssh/id_rsa")
os.system("mv ./downloads/config.txt /home/runner/.ssh/config")
os.system("chmod og-rwx /home/runner/.ssh/id_rsa")</pre>
<p></p><h2>41123199</h2>
<p>真實的 Github 帳號為 scrum-2 因為要將 <a href="https://github.com/scrum-2/cd2024">https://github.com/scrum-2/cd2024</a> 倉儲設為 test-ag1 分組倉儲的子模組, 因此使用虛擬的學號 41123199, 當完成設定之後, 41123199 學員的個人課程倉儲將可由</p>
<p><a href="https://mdecd2024.github.io/test-ag1/41123199">https://mdecd2024.github.io/test-ag1/41123199</a> 連結中擷取</p>
<p>各倉儲的 .ssh 屬性各自獨立, 因為每一個 Replit 中的 Repl 專案都是獨立個體.</p>
<p>設定以 SSH 協定將改版資料推向 Github 後, 必須先從 Shell 執行 git push, 確定要使用 id_rsa 取得授權之後, 才能再透過 git 執行隨後的 push.</p><h1>Edit_on_Codespaces</h1>
<p>將 Github Classroom 設定的 test-ag1 分組網站放入 Github Codespaces 環境進行設定並執行動態網站</p>
<p>分組網站在 Github Codespaces 的使用步驟:</p>
<ol>
<li>將分組網站導入 github.com/codespaces (可以在倉儲上方 Code 按鈕中帶出綠色 Code 區域的 Codespaces 新增或啟動與倉儲對應的網際整合開發環境)</li>
<li>在終端機以 chmod u+x init_replit 將 init_replit 指令檔案設為 user 可以執行 (execute)</li>
<li>在終端機以 ./init_replit 執行設定, 其實就是在虛擬環境中安裝執行動態編輯網站所需要的 Python 模組</li>
<li>模組安裝後, 同樣在終端機以 python3 main.py 查看是否能執行動態編輯網站</li>
<li>若動態網站已經可以執行, 就可以在終端機以 python3 main.py&amp; 令動態編輯網站在 background 執行</li>
<li>將動態編輯網站開在瀏覽器頁面, 就可以利用密碼 admin 登入進行編輯</li>
<li>由於 Codespaces 允許使用者開啟多連接埠, 因此除了執行動態網站, 也可以利用 python3 -m http.server 執行靜態網站, 若要在一個終端機頁面同時執行動態與靜態, 可以兩者都令其在 background 執行, 或者從表單的終端機功能中新增多個終端機頁面.</li>
</ol>
<p>在 Codespaces 相較於 Replit 的好處, Github Classroom 對分組倉儲所設定的管理權限, 可以直接套用到組員帳號下, 無需進行任何設定, 但是在 Replit 免費帳號環境下, 則必須在每次登入 Replit 的階段重新對 /home/runner/.ssh 中的 private key 以及 config 檔案進行設定.</p>
<p>因此, 在運用 Github Pages 與 Github Classroom 的情況下, 使用 Codespaces 雲端環境較為便捷.</p>
<p>但是, 必須注意 Github Codespaces 提供的<a href="https://docs.github.com/en/billing/managing-billing-for-github-codespaces/about-billing-for-github-codespaces">免費帳號額度</a>:</p>
<ol>
<li>每月儲存容量為 15GB, Core hours 120 小時</li>
<li>由於最小額度為 2-core, 因此若平均以每月 30 算, 每天可用的運算額度為 2 小時(?)</li>
</ol><h1>platform</h1>
<p>鋼球平衡台的零組件繪圖分別由:</p>
<p>41123199 學員繪製 parts: <a href="https://mdecd2024.github.io/test-ag1/41123199/parts">https://mdecd2024.github.io/test-ag1/41123199/parts</a> </p>
<p>這裡也可以直接引用 41123199 學員 cd2024 倉儲中的圖片或其他檔案資料</p>
<p><a href="https://mdecd2024.github.io/test-ag1/41123199/images/cad2023_2d_ball_platform_balance_0.9_0.3m_PID_control.gif">https://mdecd2024.github.io/test-ag1/41123199/images/cad2023_2d_ball_platform_balance_0.9_0.3m_PID_control.gif</a> </p>
<p><img alt="" src="https://mdecd2024.github.io/test-ag1/41123199/images/cad2023_2d_ball_platform_balance_0.9_0.3m_PID_control.gif" width="400"/></p>
<p>上圖的 html 為:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;p&gt;&lt;img src="https://mdecd2024.github.io/test-ag1/41123199/images/cad2023_2d_ball_platform_balance_0.9_0.3m_PID_control.gif" alt="" width="400"&gt;&lt;/p&gt;</pre>
<p>也就是檔案放在組員的個人課程倉儲中, 但導入作為子模組之後, 將圖片的網址放到分組網站中使用.</p><h1>cmsimde</h1>
<p><span style="background-color: #ccffcc;">SMap</span> - SiteMap - 依照階次列出網站的所有頁面.</p>
<p><span style="background-color: #ccffcc;">EditA</span> - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本.</p>
<p><span style="background-color: #ccffcc;">Edit</span> - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式.</p>
<p><span style="background-color: #ccffcc;">Config</span> - Configure Site - 編輯頁面標題與管理者密碼.</p>
<p><span style="background-color: #ccffcc;">Search</span> - 動態頁面內容的關鍵字搜尋.</p>
<p><span style="background-color: #ccffcc;">IUpload</span> - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小.</p>
<p><span style="background-color: #ccffcc;">IList</span> - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案.</p>
<p><span style="background-color: #ccffcc;">FUpload</span> - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改.</p>
<p><span style="background-color: #ccffcc;">FList</span> - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案.</p>
<p><span style="background-color: #ccffcc;">Logout</span> - 登出頁面編輯模式.</p>
<p><span style="background-color: #ccffcc;">Convert</span> - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁.</p>
<p><span style="background-color: #ccffcc;">acp</span> - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲.</p>
<p><span style="background-color: #ccffcc;">SStatic</span> - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容.</p>
<p><span style="background-color: #ccffcc;">RStatic</span> - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站.</p>
<p><span style="background-color: #ccffcc;">80</span> - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80.</p>
<p></p><h1>Replit</h1>
<p><a href="https://replit.com">https://replit.com</a></p>
<p>利用 init_replit 指令安裝所需 Python 模組<br/><br/>chmod u+x init_replit<br/><br/>./init_replit</p>
<p dir="auto">On Replit:</p>
<p dir="auto">.replit: python3 main.py</p>
<p dir="auto">chmod u+x cms init_replit</p>
<p dir="auto">./init_replit</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde_site (not needed): git submodule update --init --recursive</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent</p>
<p dir="auto">password generator: <a href="https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py">https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py</a> </p>
<p dir="auto"></p>
<p dir="auto">for IPv6 only Ubuntu:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.com<br/>ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p<br/><br/>for Replit:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.co<br/>#since Replit works for IPv4, therefore no ProxyCommand setting needed<br/>#ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p</p>
<p></p>
<p></p><h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>